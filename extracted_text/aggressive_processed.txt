# Documents processed with aggressive strategy



========================================
Document: 01 - Introduction & Getting Started.pdf
========================================

ds 4300 large scale information storage retrieval mark fontenot phd northeastern university hi mark fontenot phd ofﬁce 353 meserve hall ofﬁce hours th 130 300 pm times dont work dm slack set alternate time usually available slack dm mfontenotnortheasternedu teaching assistants 3 iker acosta venegas dallon archibald nathan cheung aryan jain abhishek kumar eddy liu sevinch noori junxiang lin ﬁnd course materials notes assignments etc httpsmarkfontenotnetteachingds430025sds4300 assignment submissions grades gradescope q platform campuswire quick dms announcements slack whats class end class understand efﬁciencyrelated concepts including limitations rdbmss understand data replication distribution effects typical db usage scenarios understand use cases data models various nosql database systems including storing retrieving data data models include documentbased keyvalue stores graph based among others access implement data engineering bigdatarelated aws services course deliverables evaluation assignments homeworks practicals usually due tuesday nights 1159 unless otherwise stated 3 bonus submitting 48 hours early cant get 3 submitting 48 hours early late submissions accepted life happens everyone gets 1 free noquestionsasked 48 hour extension dm dr fontenot slack sometime original deadline requesting use extension assignments submissions via gradescope andor github unless directed otherwise submit pdfs unless otherwise instructed submitting pdf sure associate questions gradescope correct page pdf failure may result grade 0 assignment regrade requests must submitted within 48 hours grades released gradescope exceptions midterm monday march 17 mark calendars final grade breakdown homeworks 5 30 practicals 2 20 midterm 20 semester project 30 reference materials primary resources 11 oreilly playlist books playlist add additional materials playlist webpage semester progresses tentative list topics thinking data storage retrieval data structures level far get relational model nosql databases document databases mongo graph databases neo4j keyvalue databases maybe vector databases data distribution replication distributed sql dbs apache sparksparksql big data tools services aws tools need install laptop docker desktop anaconda miniconda python youre welcome use another distro youre responsible ﬁxing something doesnt work dependency conﬂicts etc database access tool like datagrip dbeaver vs code set python development see info vscode python anaconda ability interact git github terminal gui app topics review next days shellcmd promptpowershell cli windows want unix terminal wsl2 zsh windows navigating ﬁle system running commands like pip conda python etc command line args docker docker compose basics dockerﬁles dockercomposeyaml ﬁles port mapping setting volumes mapping host guest os python rusty havent done ton python crash course net ninja yt oreilly see python section class playlist python objectoriented programming video course simon sez e matthes python crash course 3rd edition starch press related yt video playlist listed expectations conduct respectfully dont distract classmates learning dont cheat work unless group assignment discussing problems encouraged must formulate solutions see syllabus details lets gooo



========================================
Document: 02 - Foundations.pdf
========================================

ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efﬁciency linear search start beginning list proceed element element ﬁnd youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 5 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access 6 insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 8 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found ﬁrst element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching speciﬁc id fast want search speciﬁc specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefﬁcient back database searching assume data stored disk column ids value searching speciﬁc id fast want search speciﬁc specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefﬁcient 11 need external data structure support faster searching specialval linear scan arsenal 1 array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval ﬁnd corresponding row table b every insert table would like inserting sorted array slow 2 linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required b inserting table would theoretically quick also add list something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent 13 image httpscoursesgraingerillinoiseducs225sp2019notesbst board



========================================
Document: 03 - Moving Beyond the Relational Model.pdf
========================================

ds 4300 moving beyond relational model mark fontenot phd northeastern university beneﬁts relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efﬁciency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simpliﬁed error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time cannot affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read 7 figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modiﬁed another transaction t2 hasnt yet executed commit isolation nonrepeatable read 8 figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads 9 figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer 10 delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer 11 continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical ﬁnancial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions 16 single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem 19 cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view 20 reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view 21 reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying cannot limit number faults requests directed server insist serving every request cannot possibly consistent interpreted must always give something consistency availability tolerance failure



========================================
Document: 04 - Data Replication.pdf
========================================

ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data beneﬁts 2 scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 6 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning 8 replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication 12 write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers 14 replication method description statementbased send insert update deletes replica simple errorprone due nondeterministic functions like trigger sideeffects difﬁculty handling concurrent transactions writeahead log wal bytelevel speciﬁc log every change database leader followers must implement storage engine makes upgrades difﬁcult logical rowbased log relational dbs inserted rows modiﬁed rows deleted rows transaction log identify rows changed transaction changed logical logs decoupled storage engine easier parse triggerbased changes logged separate table whenever trigger ﬁres response insert update delete flexible application speciﬁc replication also error prone synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait conﬁrmation 15 synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader conﬁgure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conﬂicting data split brain way resolve conﬂicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reﬂected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modiﬁable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges 22 created followers would proximal users route requests distant leaders reading modiﬁable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent preﬁx reads reading data order occur different partitions replicate data different rates global write consistency consistent preﬁx read guarantee ensures sequence writes happens certain order anyone reading writes see appear order 24 b far future see ms b 10 seconds usually mr



========================================
Document: 05b - Redis in Docker.pdf
========================================

ds 4300 redis docker setup mark fontenot phd northeastern university prerequisites 2 installed docker desktop installed jetbrains datagrip step 1 find redis image open docker desktop use built search ﬁnd redis image click run step 2 conﬁgure run container give new container name enter 6379 host port ﬁeld click run give docker time download start redis step 3 set data source datagrip start datagrip create new redis data source use database explorer use new file menu step 4 conﬁgure data source give data source name install drivers needed message test connection test connection redis click ok connection test successful 6 message install drivers test connection arent already installed



========================================
Document: 05 - NoSQL Intro + KV DBs.pdf
========================================

ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conﬂicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else 2 see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conﬂicts unlikely occur even conﬂict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modiﬁed optimistic concurrency low conﬂict systems backups analytical dbs etc read heavy systems conﬂicts arise handled rolling back rerunning transaction notices conﬂict optimistic concurrency works well allows higher concurrency high conﬂict systems rolling back rerunning transactions encounter conﬂict less efﬁcient locking scheme pessimistic model might preferable nosql nosql ﬁrst used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data 5 httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review 6 reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review 7 reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user proﬁles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk speciﬁc intervals b appendonly ﬁle journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments conﬁg settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type 27 value kv entry collection ﬁeldvalue pairs use cases used represent basic objectsstructures number ﬁeldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl active session tracking sessions one hash key hash commands 28 hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 30 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 33 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300



========================================
Document: 06 - Redis + Python.pdf
========================================

ds 4300 redis python mark fontenot phd northeastern university redispy 2 redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings 3 import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead 12 r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simpliﬁed example 14 source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml 15 source httpsmadewithmlcomcoursesmlopsfeaturestore



========================================
Document: 07 - Document DBs and Mongo.pdf
========================================

ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple ﬂexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax 4 httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efﬁcient encoding decoding must efﬁcient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving speciﬁc elements xml doc xquery query language interrogating xml documents sql xml dtd document type deﬁnition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service 10 httpswwwmongodbcomcompanyourstory mongodb structure 11 database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predeﬁned schema documents needed every document collection could different dataschema relational vs mongodocument db 13 rdbms mongodb database database tableview collection row document column field index index join embedded document foreign key reference mongodb features rich query support robust support crud ops indexing supports primary secondary indices document ﬁelds replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser 17 e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mﬂix download mﬂix sample dataset unzip import json ﬁles users theaters movies comments new collections mﬂix database creating database collection 20 mﬂix users create new db create new collection mongosh mongo shell ﬁnd like select 21 collectionfind ____ ____ ﬁlters projections mongosh ﬁnd select users 22 use mflix dbusersfind mongosh ﬁnd select years name davos seaworth 23 dbusersfindname davos seaworth ﬁlter mongosh ﬁnd select movies rated pg pg13 24 dbmoviesfindrated pg pg13 mongosh ﬁnd return movies released mexico imdb rating least 7 25 dbmoviesfind countries mexico imdbrating gte 7 mongosh ﬁnd return movies movies collection released 2010 either least 5 awards genre drama 26 dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama 28 dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama 29 dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances 31 pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection 32 pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document 33 db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection 34 demodbcollectioncount_documents



========================================
Document: 08 - PyMongo.pdf
========================================

ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances 2 pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection 3 pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document 4 db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 5 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip ﬁle contains 2 jupyter notebooks terminal navigate folder unzipped ﬁles run jupyter lab



========================================
Document: 09 - Introduction to Graph Data Model.pdf
========================================

ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identiﬁed contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions ﬁelds like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 7 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges deﬁne start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathﬁnding pathﬁnding ﬁnding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efﬁciency resiliency networks minimum spanning tree cycle detection maxmin ﬂow types pathﬁnding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network inﬂuencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune



========================================
Document: 10 - Neo4j.pdf
========================================

ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efﬁcient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose 5 supports multicontainer management setup declarative using yaml dockercomposeyaml ﬁle services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml 6 services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose ﬁle use env ﬁles env files env ﬁles stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod 7 neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser 10 httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob 12 note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netﬂixzip ﬁle copy netﬂix_titlescsv following folder put docker compose ﬁle neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year 16 type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

